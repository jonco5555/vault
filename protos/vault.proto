syntax = "proto3";

package vault;

service Manager {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse);
    rpc RetrieveSecret(RetrieveSecretRequest) returns (RetrieveSecretResponse);
}

message RegisterRequest {
    string user_id = 1;
    bytes user_public_key = 2;
}

message Key {
    string x = 1;
    string y = 2;
}

message RegisterResponse {
    bytes encrypted_share = 1;
    bytes encrypted_key = 2;
}

message Secret {
    Key c1 = 1;
    Key c2 = 2;
    bytes ciphertext = 3;
}

message PartialDecrypted {
    string x = 1;
    Key yc1 = 2;
}

message StoreSecretRequest {
    string user_id = 1;
    string secret_id = 2;
    Secret secret = 3;
}

message StoreSecretResponse {
    bool success = 1;
}

message RetrieveSecretRequest {
    string user_id = 1;
    string secret_id = 2;
    string auth_token = 3;
}

message RetrieveSecretResponse {
    repeated PartialDecrypted partial_decryptions = 1;
    repeated Secret secret = 2;
}

service Bootstrap {
    rpc GenerateShares(GenerateSharesRequest) returns (GenerateSharesResponse);
}

message GenerateSharesRequest {
    int32 threshold = 1;
    int32 num_of_shares = 2;
    repeated bytes public_keys = 3;
}

message GenerateSharesResponse {
    repeated bytes encrypted_shares = 1;
    bytes encrypted_key = 2;
}

service ShareServer {
    rpc StoreShare(StoreShareRequest) returns (StoreShareResponse);
    rpc DeleteShare(DeleteShareRequest) returns (DeleteShareResponse);
    rpc Decrypt(DecryptRequest) returns (DecryptResponse);
}

message StoreShareRequest {
    string user_id = 1;
    bytes encrypted_share = 2;
}

message StoreShareResponse {
    bool success = 1;
}

message DeleteShareRequest {
    string user_id = 1;
}

message DeleteShareResponse {
    bool success = 1;
}

message DecryptRequest {
    string user_id = 1;
    Secret secret = 2;
}

message DecryptResponse {
    PartialDecrypted partial_decrypted_secret = 1;
}
