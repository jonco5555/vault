syntax = "proto3";

package vault;

service Manager {
  // Register username over SRP protocol and store end-2-end encryption key.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Single bidirectional stream: SRP login handshake + authenticated application request/response
  rpc SecureCall(stream SecureReqMsgWrapper) returns (stream SecureRespMsgWrapper);
}

message RegisterRequest {
  string user_id = 1;
  string verifier = 2;
  string salt = 3;
  bytes user_public_key = 4;
}

message RegisterResponse {
    bytes encrypted_share = 1;
    bytes encrypted_key = 2;
}

// wrapper for a real message
message SRPFirstStep {
  string username = 1;
}

message SRPSecondStep {
  string server_public_key = 1;
  string salt = 2;
}

message SRPThirdStep {
  string client_public_key = 1;
  string client_session_key_proof = 2;
}

message SRPThirdStepAck {
  bool ok = 1;
  string err = 2;
}

message InnerRequest {
  oneof body {
    StoreSecretRequest store = 1;
    RetrieveSecretRequest retrieve = 2;
  }
}

message InnerResponse {
  oneof body {
    StoreSecretResponse store = 1;
    RetrieveSecretResponse retrieve = 2;
  }
}

message SecureReqMsgWrapper {
  oneof body {
    SRPFirstStep auth_step_1 = 1;
    SRPThirdStep auth_step_3 = 2;
    InnerRequest app_req = 3;
  }
}

message SecureRespMsgWrapper {
  oneof body {
    SRPSecondStep auth_step_2 = 1;
    SRPThirdStepAck auth_step_3_ack = 2;
    InnerResponse app_resp = 3;
  }
}

message Key {
    string x = 1;
    string y = 2;
}

message Secret {
    Key c1 = 1;
    Key c2 = 2;
    bytes ciphertext = 3;
}

message PartialDecrypted {
    string x = 1;
    Key yc1 = 2;
}

message StoreSecretRequest {
    string user_id = 1;
    string secret_id = 2;
    Secret secret = 3;
}

message StoreSecretResponse {
    bool success = 1;
}

message RetrieveSecretRequest {
    string user_id = 1;
    string secret_id = 2;
}

message RetrieveSecretResponse {
    repeated PartialDecrypted partial_decryptions = 1;
    Secret secret = 2;
}

service Bootstrap {
    rpc GenerateShares(GenerateSharesRequest) returns (GenerateSharesResponse);
}

message GenerateSharesRequest {
    int32 threshold = 1;
    int32 num_of_shares = 2;
    repeated bytes public_keys = 3;
}

message GenerateSharesResponse {
    repeated bytes encrypted_shares = 1;
    bytes encrypted_key = 2;
}

service ShareServer {
    rpc StoreShare(StoreShareRequest) returns (StoreShareResponse);
    rpc DeleteShare(DeleteShareRequest) returns (DeleteShareResponse);
    rpc Decrypt(DecryptRequest) returns (DecryptResponse);
}

message StoreShareRequest {
    string user_id = 1;
    bytes encrypted_share = 2;
}

message StoreShareResponse {
    bool success = 1;
}

message DeleteShareRequest {
    string user_id = 1;
}

message DeleteShareResponse {
    bool success = 1;
}

message DecryptRequest {
    string user_id = 1;
    Secret secret = 2;
}

message DecryptResponse {
    PartialDecrypted partial_decrypted_secret = 1;
}
